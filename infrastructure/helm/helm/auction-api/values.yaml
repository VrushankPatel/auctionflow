# Default values for auction-api.
replicaCount: 1

# Multi-region configuration
global:
  region: us-east-1  # Default region, override per deployment
  regions:
    - us-east-1
    - eu-west-1
    - ap-southeast-1
  geoRouting:
    enabled: true
    provider: aws-global-accelerator  # Options: aws-global-accelerator, cloudflare
    latencyBased: true
  failover:
    enabled: true
    healthCheckPath: /actuator/health
    unhealthyThreshold: 3
  dataSovereignty:
    enabled: true
    euRegions:
      - eu-west-1
    gdprCompliant: true

# Infrastructure dependencies (global across regions)
postgresql:
  enabled: true
  globalDatabase: true  # Enable Aurora Global Database
  primaryRegion: us-east-1
  secondaryRegions:
    - eu-west-1
    - ap-southeast-1
  host: postgres-primary  # Override per region
  port: 5432
  database: auctiondb
  username: auctionuser
  password: auctionpass
redis:
  enabled: true
  globalDatastore: true  # Enable ElastiCache Global Datastore
  primaryRegion: us-east-1
  secondaryRegions:
    - eu-west-1
    - ap-southeast-1
  host: redis-1  # Override per region
  port: 6379
  password: ""
  clusterNodes: "redis-1:6379,redis-2:6379"
kafka:
  enabled: true
  crossRegionReplication: true  # Enable MSK cross-region replication
  regions:
    - us-east-1
    - eu-west-1
    - ap-southeast-1
  bootstrapServers: "kafka-1:9092"  # Override per region

image:
  repository: auctionflow/auction-api
  tag: "latest"
  pullPolicy: IfNotPresent

service:
  type: LoadBalancer
  port: 80
  targetPort: 8080

resources:
  requests:
    cpu: 250m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

hpa:
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

config:
  spring:
    datasource:
      url: jdbc:postgresql://${POSTGRES_HOST:postgres-primary}:${POSTGRES_PORT:5432}/${POSTGRES_DB}
      username: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      driver-class-name: org.postgresql.Driver
    data:
      redis:
        host: ${REDIS_HOST:redis-1}
        port: ${REDIS_PORT:6379}
        password: ${REDIS_PASSWORD}
        cluster:
          nodes: ${REDIS_CLUSTER_NODES}
    kafka:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-1:9092}
      producer:
        acks: all
        retries: 3
      consumer:
        group-id: auction-api
        auto-offset-reset: earliest
    security:
      oauth2:
        client:
          registration:
            google:
              client-id: ${GOOGLE_CLIENT_ID}
              client-secret: ${GOOGLE_CLIENT_SECRET}
              redirect-uri: http://localhost:8080/login/oauth2/code/google
              scope:
                - openid
                - email
                - profile
            facebook:
              client-id: ${FACEBOOK_CLIENT_ID}
              client-secret: ${FACEBOOK_CLIENT_SECRET}
              redirect-uri: http://localhost:8080/login/oauth2/code/facebook
              scope:
                - email
                - public_profile
  jwt:
    secret: ${JWT_SECRET}
    expiration: 86400000
    refreshExpiration: 604800000
  management:
    endpoints:
      web:
        exposure:
          include: health,prometheus
    endpoint:
      health:
        probes:
          enabled: true
        show-details: when_authorized
    health:
      readiness-state:
        enabled: true
      liveness-state:
        enabled: true
    metrics:
      export:
        prometheus:
          enabled: true
  otel:
    service:
      name: auction-api
    traces:
      exporter: jaeger
      sampler: parentbased_always_on
      sampler.arg: 0.1
    exporter:
      jaeger:
        endpoint: http://localhost:14268/api/traces

secrets:
  GOOGLE_CLIENT_ID: "dummy-google-client-id"
  GOOGLE_CLIENT_SECRET: "dummy-google-client-secret"
  FACEBOOK_CLIENT_ID: "dummy-facebook-client-id"
  FACEBOOK_CLIENT_SECRET: "dummy-facebook-client-secret"
  JWT_SECRET: "mySecretKeyForJWTWhichShouldBeAtLeast256BitsLong"